{"version":3,"sources":["components/landing/Landing.js","components/BackNav.js","components/places/PlaceSummary.js","components/places/PlaceList.js","components/Loader.js","components/places/PlaceListContainer.js","components/places/PlaceDetails.js","App.js","serviceWorker.js","index.js"],"names":["Landing","handleRadiusData","err","geolocationGateway","className","to","icon","faMapPin","htmlFor","id","onChange","e","target","value","BackNav","label","linkTo","PlaceSummary","place","venue","name","categories","location","distance","PlaceList","places","map","key","Loader","PlaceListContainer","state","isLoaded","getPlaces","lat","lng","radius","fetch","method","then","response","json","meta","code","updatePlaceList","groups","items","handleError","catch","console","log","setState","this","props","length","Component","PlaceDetails","getPlaceDetails","request","match","params","url","href","faLink","content","formattedAddress","App","findUserLocation","navigator","geolocation","getCurrentPosition","updateLocation","updateLocationError","position","coords","latitude","longitude","error","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","basename","exact","path","render","routeProps","component","Boolean","window","hostname","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"qUAsCeA,EAjCC,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,iBAAkBC,EAAS,EAATA,IAO5BC,EAAqBD,EACzB,yBAAKE,UAAU,OAAf,mCAAsDF,EAAtD,KACE,kBAAC,IAAD,CAAMG,GAAG,UAAUD,UAAU,UAA7B,gBAEJ,OACE,yBAAKA,UAAU,WACb,2CACA,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAiBA,UAAU,OAAOE,KAAMC,OAE1C,yBAAKH,UAAU,eACb,2BAAOI,QAAQ,mBAAf,0BACA,4BAAQC,GAAG,kBAAkBC,SAhBd,SAACC,GACpBV,EAAiBU,EAAEC,OAAOC,SAgBpB,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,WAGHV,ICpBQW,EARC,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OACvB,OACE,kBAAC,IAAD,CAAMZ,UAAU,WAAWC,GAAIW,GAA/B,KACUD,ICWCE,EAdM,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACrB,OACE,yBAAKd,UAAU,iBACb,yBAAKA,UAAU,YACb,0BAAMA,UAAU,QAAQc,EAAMC,MAAMC,MADtC,IACmD,6BAChDF,EAAMC,MAAME,WAAW,GAAGD,MAE7B,yBAAKhB,UAAU,YACZc,EAAMC,MAAMG,SAASC,SADxB,QCUSC,EAfG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAChB,OACI,yBAAKrB,UAAU,cACZqB,EAAOC,IAAI,SAAAR,GACV,OACE,kBAAC,IAAD,CAAMS,IAAKT,EAAMC,MAAMV,GAAIJ,GAAI,UAAYa,EAAMC,MAAMV,IACrD,kBAAC,EAAD,CAAcS,MAAOA,SCCtBU,EAVA,WACb,OACE,yBAAKxB,UAAU,UACb,yBAAKA,UAAU,gBAAe,8BAAW,8BAAW,iCCyE3CyB,E,2MAvEbC,MAAQ,CACNC,UAAU,EACVN,OAAO,GACPvB,KAAI,G,EAKN8B,UAAY,SAACC,EAAKC,EAAKC,GAOrBC,MANgB,wLAINH,EAAM,IAAMC,EACrB,WAAaC,EACC,CACbE,OAAQ,QAETC,KAAK,SAAAC,GAAa,OAAOA,EAASC,SAClCF,KAAK,SAAAE,GACgB,MAAjBA,EAAKC,KAAKC,KAAY,EAAKC,gBAAgBH,EAAKD,SAASK,OAAO,GAAGC,OACjE,EAAKC,gBAEXC,MAAM,SAAA7C,GACL8C,QAAQC,IAAI/C,M,EAGhByC,gBAAkB,SAACE,GACjB,EAAKK,SAAS,CACZzB,OAAQoB,EACRd,UAAS,K,EAGbe,YAAc,WACZ,EAAKI,SAAS,CACZnB,UAAS,EACT7B,KAAI,K,mFA9BNiD,KAAKnB,UAAUmB,KAAKC,MAAMnB,IAAKkB,KAAKC,MAAMlB,IAAKiB,KAAKC,MAAMjB,U,+BAiClD,IAAD,OAsBP,OACE,yBAAK/B,UAAU,UACb,kBAAC,EAAD,CAASW,MAAM,SAASC,OAAO,MAC/B,yCACA,kBAzBY,WACd,OAAG,EAAKc,MAAMC,UAAY,EAAKD,MAAM5B,IACnC,yBAAKE,UAAU,OAAf,gCAC+B,6BAC7B,kBAAC,EAAD,CAASW,MAAM,OAAOC,OAAO,OAG9B,EAAKc,MAAMC,WACX,EAAKD,MAAM5B,KACiB,IAA7B,EAAK4B,MAAML,OAAO4B,OAChB,yBAAKjD,UAAU,OAAf,gDAC+C,6BAC7C,kBAAC,EAAD,CAASW,MAAM,OAAOC,OAAO,OAGhC,EAAKc,MAAMC,WAAa,EAAKD,MAAM5B,IACpC,kBAAC,EAAD,CAAWuB,OAAQ,EAAKK,MAAML,SAEzB,kBAAC,EAAD,OAOL,W,GAlEyB6B,aCsDlBC,E,2MArDbzB,MAAQ,CACNC,UAAS,EACTZ,MAAM,I,EAKRqC,gBAAkB,WAChB,IAAMC,EAAU,wCACd,EAAKL,MAAMM,MAAMC,OAAOlD,GACzB,wIAGD2B,MAAMqB,EAAS,CACbpB,OAAQ,QAETC,KAAK,SAAAC,GAAa,OAAOA,EAASC,SAClCF,KAAK,SAAAE,GACJ,EAAKU,SAAS,CACZ/B,MAAOqB,EAAKD,SAASpB,MACrBY,UAAS,MAGZgB,MAAM,SAAA7C,GAAQ8C,QAAQC,IAAI/C,M,mFAlB3BiD,KAAKK,oB,+BAsBL,IAAMI,EAAMT,KAAKrB,MAAMC,SACrB,uBAAG8B,KAAMV,KAAKrB,MAAMX,MAAMyC,KAAK,kBAAC,IAAD,CAAiBxD,UAAU,OAAOE,KAAMwD,MAAvE,WACE,qDAEEC,EAAUZ,KAAKrB,MAAMC,SACvB,yBAAK3B,UAAU,iBACb,4BAAK+C,KAAKrB,MAAMX,MAAMC,MACrB+B,KAAKrB,MAAMX,MAAME,WAAW,GAAGD,KAChC,yBAAKhB,UAAU,WACZ+C,KAAKrB,MAAMX,MAAMG,SAAS0C,iBAAiB,GAD9C,KACmD,6BAChDb,KAAKrB,MAAMX,MAAMG,SAAS0C,iBAAiB,IAE7CJ,GAED,kBAAC,EAAD,MAEJ,OACE,6BACE,kBAAC,EAAD,CAAS7C,MAAM,UAAUC,OAAO,YAC/B+C,O,GA/CgBT,aCgFZW,E,2MA7EbnC,MAAQ,CACNG,IAAK,GACLC,IAAK,GACLC,OAAO,IACPjC,IAAK,I,EAKPgE,iBAAmB,WACbC,UAAUC,YACZD,UAAUC,YAAYC,mBAAmB,EAAKC,eAAgB,EAAKC,qBAEnE,EAAKrB,SAAS,CAAChD,IAAI,mD,EAGvBoE,eAAiB,SAACE,GAChB,EAAKtB,SAAS,CACZjB,IAAKuC,EAASC,OAAOC,SACrBxC,IAAKsC,EAASC,OAAOE,a,EAGzBJ,oBAAsB,SAACK,GACrB,OAAOA,EAAMlC,MACX,KAAKkC,EAAMC,kBACT,EAAK3B,SAAS,CAAChD,IAAI,6CACnB,MACF,KAAK0E,EAAME,qBACT,EAAK5B,SAAS,CAAChD,IAAI,yCACnB,MACF,KAAK0E,EAAMG,QACT,EAAK7B,SAAS,CAAChD,IAAI,gDACnB,MACF,QACE,EAAKgD,SAAS,CAAChD,IAAI,iC,EAGzBD,iBAAmB,SAACkC,GAClB,EAAKe,SAAS,CACZf,OAAOA,K,mFAhCTgB,KAAKe,qB,+BAoCG,IAAD,OACP,OACE,kBAAC,IAAD,CAAYc,SAAS,KACnB,yBAAK5E,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE6E,OAAK,EAACC,KAAK,IACXC,OAAU,SAACC,GAAD,OACR,kBAAC,EAAD,iBACMA,EADN,CAEEnF,iBAAkB,EAAKA,iBACvBC,IAAK,EAAK4B,MAAM5B,UAItB,kBAAC,IAAD,CACEgF,KAAK,UACLC,OAAQ,SAACC,GAAD,OACN,kBAAC,EAAD,iBACMA,EADN,CAEEnD,IAAK,EAAKH,MAAMG,IAChBC,IAAK,EAAKJ,MAAMI,IAChBC,OAAQ,EAAKL,MAAMK,aAIzB,kBAAC,IAAD,CAAO+C,KAAK,aAAaG,UAAW9B,W,GAtE9BD,aCIEgC,QACW,cAA7BC,OAAOjE,SAASkE,UAEe,UAA7BD,OAAOjE,SAASkE,UAEhBD,OAAOjE,SAASkE,SAAS9B,MACvB,2DCZN+B,IAASN,OAAO,kBAAC,EAAD,MAASO,SAASC,eAAe,SD2H3C,kBAAmBxB,WACrBA,UAAUyB,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC,iB","file":"static/js/main.ee92adda.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMapPin } from '@fortawesome/free-solid-svg-icons'\n\nconst Landing = ({handleRadiusData, err}) => {\n\n  // sends user-selected radius back to parent component\n  const handleChange = (e) => {\n    handleRadiusData(e.target.value);\n  }\n  // stores the link to '/places' if geolocation is found, otherwise displays error\n  const geolocationGateway = err ? (\n    <div className='err'>Sorry, we could not locate you. {err} </div> ) : (\n      <Link to='/places' className=\"submit\">Find Places!</Link>\n    );\n  return(\n    <div className=\"landing\">\n      <h1>PlaceFinder</h1>\n      <div className=\"icon-wrapper\">\n        <FontAwesomeIcon className=\"icon\" icon={faMapPin} />\n      </div>\n      <div className=\"input-group\">\n        <label htmlFor=\"distance-select\">Find me places within:</label>\n        <select id=\"distance-select\" onChange={handleChange}>\n          <option value=\"1000\">1 km</option>\n          <option value=\"2000\">2 km</option>\n          <option value=\"5000\">5 km</option>\n          <option value=\"10000\">10 km</option>\n        </select>\n      </div>\n      {geolocationGateway}\n    </div>\n  )\n\n}\n\n\nexport default Landing\n","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nconst BackNav = ({label, linkTo}) => {\n  return (\n    <Link className=\"back-nav\" to={linkTo}>\n      &#x3c; {label}\n    </Link>\n  )\n}\n\nexport default BackNav\n","import React from 'react'\n\n\nconst PlaceSummary = ({place}) => {\n  return (\n    <div className=\"place-summary\">\n      <div className=\"overview\">\n        <span className=\"name\">{place.venue.name}</span> <br></br>\n        {place.venue.categories[0].name}\n      </div>\n      <div className=\"distance\">\n        {place.venue.location.distance} m\n      </div>\n    </div>\n  )\n}\n\nexport default PlaceSummary\n","import React from 'react';\nimport PlaceSummary from './PlaceSummary'\nimport {Link} from 'react-router-dom'\n\n// returns a list of place summaries that link to corresponding place details\nconst PlaceList = ({places}) => {\n    return(\n        <div className=\"place-list\">\n          {places.map(place => {\n            return (\n              <Link key={place.venue.id} to={'/place/' + place.venue.id}>\n                <PlaceSummary place={place} />\n              </Link>\n            )\n            }\n          )}\n        </div>\n    )\n}\n\nexport default PlaceList\n","import React from 'react'\n\nconst Loader = () => {\n  return(\n    <div className=\"loader\">\n      <div className=\"lds-facebook\"><div></div><div></div><div></div></div>\n    </div>\n\n  )\n\n}\n\nexport default Loader\n","import React, {Component} from 'react';\nimport BackNav from '../BackNav'\nimport PlaceList from './PlaceList'\nimport Loader from '../Loader'\n\n\nclass PlaceListContainer extends Component {\n  state = {\n    isLoaded: false,\n    places:[],\n    err:false\n  }\n  componentDidMount() {\n    this.getPlaces(this.props.lat, this.props.lng, this.props.radius);\n  }\n  getPlaces = (lat, lng, radius) => {\n    const request = 'https://api.foursquare.com/v2/venues/explore' +\n     '?client_id=XYR5YDLGG2GG0VZAH0J4KF2Y1CORCI3FNGZ3NSYYUOYUKEFX' + // client id\n     '&client_secret=QHHW1NN1N1EB2D1Q5QRNOZ0PX3LV4FN4FUAVC43KR2ZDMQJ0' + // client secret\n     '&v=20190831' + // version\n     '&ll=' + lat + ',' + lng +\n     '&radius=' + radius;\n    fetch(request, {\n      method: \"GET\"\n    })\n    .then(response => {return response.json();} )\n    .then(json => {\n      if(json.meta.code===200) this.updatePlaceList(json.response.groups[0].items);\n      else this.handleError();\n    })\n    .catch(err => {\n      console.log(err);\n    })\n  }\n  updatePlaceList = (items) => {\n    this.setState({\n      places: items,\n      isLoaded:true\n    })\n  }\n  handleError = () => {\n    this.setState({\n      isLoaded:true,\n      err:true\n    })\n  }\n  render() {\n    const Content = () => {\n      if(this.state.isLoaded && this.state.err) return ( // error in fetching data\n        <div className='err'>\n          Sorry, something went wrong. <br></br>\n          <BackNav label='home' linkTo='/'/>\n        </div>\n      )\n      if(this.state.isLoaded &&  // no results found\n        !this.state.err &&\n        this.state.places.length === 0) return (\n          <div className='err'>\n            No places found. Please try a bigger radius. <br></br>\n            <BackNav label='home' linkTo='/'/>\n          </div>\n        )\n      if(this.state.isLoaded && !this.state.err) return ( // results found\n        <PlaceList places={this.state.places}/>\n      )\n      return <Loader/>\n    };\n\n    return(\n      <div className='places'>\n        <BackNav label=\"Filter\" linkTo=\"/\"/>\n        <h2> Results </h2>\n        <Content/>\n      </div>\n    )\n  }\n}\n\nexport default PlaceListContainer\n","import React, {Component} from 'react'\nimport BackNav from '../BackNav'\nimport Loader from '../Loader'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faLink } from '@fortawesome/free-solid-svg-icons'\n\nclass PlaceDetails extends Component {\n  state = {\n    isLoaded:false,\n    venue:{}\n  }\n  componentDidMount() {\n    this.getPlaceDetails();\n  }\n  getPlaceDetails = () => {\n    const request = 'https://api.foursquare.com/v2/venues/' +\n      this.props.match.params.id + // venue id\n     '?client_id=XYR5YDLGG2GG0VZAH0J4KF2Y1CORCI3FNGZ3NSYYUOYUKEFX' + // client id\n     '&client_secret=QHHW1NN1N1EB2D1Q5QRNOZ0PX3LV4FN4FUAVC43KR2ZDMQJ0' + // client secret\n     '&v=20190831'  // version\n    fetch(request, {\n      method: \"GET\"\n    })\n    .then(response => {return response.json();} )\n    .then(json => {\n      this.setState({\n        venue: json.response.venue,\n        isLoaded:true\n      })\n    })\n    .catch(err => {console.log(err);} )\n  }\n  render() {\n\n    const url = this.state.isLoaded ? (\n      <a href={this.state.venue.url}><FontAwesomeIcon className=\"icon\" icon={faLink}/>website</a>\n    ) : <div>No website available</div>\n\n    const content = this.state.isLoaded ? (\n        <div className='place-details'>\n          <h2>{this.state.venue.name}</h2>\n          {this.state.venue.categories[0].name}\n          <div className=\"address\">\n            {this.state.venue.location.formattedAddress[0]}, <br></br>\n            {this.state.venue.location.formattedAddress[1]}\n          </div>\n          {url}\n        </div>\n      ) : <Loader/>\n\n      return(\n        <div>\n          <BackNav label=\"Results\" linkTo='/places'/>\n          {content}\n        </div>\n      )\n  }\n}\n\n\nexport default PlaceDetails\n\n\n// if (this.state.isLoaded) {\n//   return(\n//     <div>\n//       <h2>{this.state.venue.name}</h2>\n//       {this.state.venue.location.address}\n//       {this.state.venue.categories[0].name}\n//     </div>\n//   )\n// } else {\n//   return <Loader/>\n// }\n","import React, { Component } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Landing from './components/landing/Landing'\nimport PlaceListContainer from './components/places/PlaceListContainer'\nimport PlaceDetails from './components/places/PlaceDetails'\n\n\nclass App extends Component {\n  state = {\n    lat: '',\n    lng: '',\n    radius:1000,\n    err: ''\n  }\n  componentDidMount() {\n    this.findUserLocation();\n  }\n  findUserLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.updateLocation, this.updateLocationError);\n    } else {\n      this.setState({err:\"Geolocation is not supported by this browser.\"});\n    }\n  }\n  updateLocation = (position) => {\n    this.setState({\n      lat: position.coords.latitude,\n      lng: position.coords.longitude\n    })\n  }\n  updateLocationError = (error) => {\n    switch(error.code) {\n      case error.PERMISSION_DENIED:\n        this.setState({err:\"User denied the request for Geolocation.\"});\n        break;\n      case error.POSITION_UNAVAILABLE:\n        this.setState({err:\"Location information is unavailable.\"});\n        break;\n      case error.TIMEOUT:\n        this.setState({err:\"The request to get user location timed out.\"});\n        break;\n      default:\n        this.setState({err:\"An unknown error occurred.\"});\n    }\n  }\n  handleRadiusData = (radius) => {\n    this.setState({\n      radius:radius\n    })\n  }\n\n  render() {\n    return (\n      <HashRouter basename='/'>\n        <div className=\"app\">\n          <Switch>\n            <Route\n              exact path='/'\n              render = {(routeProps) => (\n                <Landing\n                  {...routeProps}\n                  handleRadiusData={this.handleRadiusData}\n                  err={this.state.err}\n                  />\n              )}\n              />\n            <Route\n              path='/places'\n              render={(routeProps) => (\n                <PlaceListContainer\n                  {...routeProps}\n                  lat={this.state.lat}\n                  lng={this.state.lng}\n                  radius={this.state.radius}\n                  />\n              )}\n              />\n            <Route path='/place/:id' component={PlaceDetails} />\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}